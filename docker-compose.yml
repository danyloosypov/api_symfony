services:
  # Database service
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-api_symfony}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      POSTGRES_USER: ${POSTGRES_USER:-root}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-root}", "-U", "${POSTGRES_USER:-root}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
    networks:
      - symfony_network

  # Symfony application service
  symfony:
    image: ${PROJECT_NAME:-api_symfony}-image  # Use the image for your Symfony app (either build from a Dockerfile or a pre-built image)
    container_name: ${PROJECT_NAME:-api_symfony}-app
    build:
      context: docker/php/  # Dockerfile location
    volumes:
      - .:/var/www/html  # Mount your local code to the container's directory
    networks:
      - symfony_network
    environment:
      - SYMFONY_ENV=prod  # Adjust as needed for your environment
    depends_on:
      - database  # Ensure database starts before the app

  # Nginx service
  nginx:
    image: nginx:alpine
    container_name: ${PROJECT_NAME:-api_symfony}-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf  # Path to your Nginx config file
      - ./public:/var/www/html/public  # Ensure your Symfony app's public directory is correctly mapped
    networks:
      - symfony_network
    depends_on:
      - symfony  # Ensure Symfony app is up before Nginx

  # pgAdmin service
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - symfony_network

volumes:
  database_data: {}
  pgadmin_data: {}

networks:
  symfony_network:
    driver: bridge
